/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health check endpoint */
    get: operations["HealthController_check"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/login": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User login
     * @description Authenticate user with email and password
     */
    post: operations["AuthController_login"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/refresh": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refresh token
     * @description Get new access token using refresh token
     */
    post: operations["AuthController_refresh"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/logout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User logout
     * @description Invalidate refresh token
     */
    post: operations["AuthController_logout"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/google": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Google OAuth login
     * @description Initiate Google OAuth authentication
     */
    get: operations["AuthController_googleAuth"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/google/callback": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Google OAuth callback
     * @description Handle Google OAuth callback
     */
    get: operations["AuthController_googleAuthCallback"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/google/link": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link Google account
     * @description Link Google account to existing user
     */
    post: operations["AuthController_linkGoogleAccount"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/send-email-otp": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Send email OTP
     * @description Send OTP code to user email address
     */
    post: operations["AuthController_sendEmailOtpCode"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/signup": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User signup
     * @description Register new user with email, password and OTP verification
     */
    post: operations["AuthController_signUp"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/validate-otp": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Validate OTP
     * @description Validate OTP code for email address
     */
    post: operations["AuthController_validateOtp"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/users": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create user
     * @description Create a new user account
     */
    post: operations["UserController_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/users/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user by ID
     * @description Retrieve user information by ID
     */
    get: operations["UserController_findOne"]
    put?: never
    post?: never
    /**
     * Delete user
     * @description Delete user account by ID
     */
    delete: operations["UserController_remove"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/users/profile": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user profile
     * @description Get current authenticated user information
     */
    get: operations["UserController_getProfile"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/profile": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get own profile
     * @description Get current user profile
     */
    get: operations["ProfileController_getProfile"]
    /**
     * Update profile
     * @description Update current user profile
     */
    put: operations["ProfileController_updateProfile"]
    /**
     * Create profile
     * @description Create a new user profile
     */
    post: operations["ProfileController_createProfile"]
    /**
     * Delete profile
     * @description Delete current user profile
     */
    delete: operations["ProfileController_deleteProfile"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/profile/{userId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get public profile
     * @description Get public user profile by user ID
     */
    get: operations["ProfileController_getPublicProfile"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/profile/social-links": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update social links
     * @description Update social media links
     */
    patch: operations["ProfileController_updateSocialLinks"]
    trace?: never
  }
  "/profile/preferences": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update preferences
     * @description Update user preferences
     */
    patch: operations["ProfileController_updatePreferences"]
    trace?: never
  }
  "/statistics/me": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current user statistics */
    get: operations["StatisticsController_getMyStatistics"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/statistics/leaderboard": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get leaderboard */
    get: operations["StatisticsController_getLeaderboard"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/statistics/top-fans": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top fans by points and completed tasks */
    get: operations["StatisticsController_getTopFans"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/statistics/{userId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get statistics for specific user */
    get: operations["StatisticsController_getUserStatistics"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/addresses": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all addresses
     * @description Get all addresses for current user
     */
    get: operations["AddressController_getAddresses"]
    put?: never
    /**
     * Create address
     * @description Create a new address for current user
     */
    post: operations["AddressController_createAddress"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/addresses/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get address by ID
     * @description Get specific address by ID
     */
    get: operations["AddressController_getAddress"]
    /**
     * Update address
     * @description Update specific address by ID
     */
    put: operations["AddressController_updateAddress"]
    post?: never
    /**
     * Delete address
     * @description Delete specific address by ID
     */
    delete: operations["AddressController_deleteAddress"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all active tasks */
    get: operations["TasksController_getAllTasks"]
    put?: never
    /** Create a new task (Admin only) */
    post: operations["TasksController_createTask"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get task by ID */
    get: operations["TasksController_getTaskById"]
    /** Update a task (Admin only) */
    put: operations["TasksController_updateTask"]
    post?: never
    /** Deactivate a task (Admin only) */
    delete: operations["TasksController_deactivateTask"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/assign": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Assign a task to a user (Admin only) */
    post: operations["TasksController_assignTask"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/my-teams": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get tasks from my favorite teams */
    get: operations["TasksController_getTasksFromMyTeams"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/user/me": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current user tasks */
    get: operations["TasksController_getMyTasks"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/user/me/active": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current user active tasks (pending/in-progress) */
    get: operations["TasksController_getMyActiveTasks"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/user/{userTaskId}/start": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Start a task (change status to in_progress) */
    patch: operations["TasksController_startTask"]
    trace?: never
  }
  "/tasks/user/complete": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Complete a task */
    post: operations["TasksController_completeTask"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/tasks/user/me/stats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user completed tasks count */
    get: operations["TasksController_getMyTasksStats"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/favorite-teams": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get my favorite teams */
    get: operations["UserFavoriteTeamsController_getFavoriteTeams"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/favorite-teams/{teamId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add team to favorites */
    post: operations["UserFavoriteTeamsController_addFavoriteTeam"]
    /** Remove team from favorites */
    delete: operations["UserFavoriteTeamsController_removeFavoriteTeam"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/favorite-teams/check/{teamId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Check if team is in favorites */
    get: operations["UserFavoriteTeamsController_checkIsFavorite"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all active teams */
    get: operations["TeamsController_getAllTeams"]
    put?: never
    /** Create team (Admin only) */
    post: operations["TeamsController_createTeam"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams/search": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search teams by name (multilingual) */
    get: operations["TeamsController_searchTeams"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams/sport-types": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all available sport types */
    get: operations["TeamsController_getAllSportTypes"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams/sport/{sportType}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get teams by sport type */
    get: operations["TeamsController_getTeamsBySport"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get team by ID */
    get: operations["TeamsController_getTeamById"]
    /** Update team (Admin only) */
    put: operations["TeamsController_updateTeam"]
    post?: never
    /** Delete team permanently (Super Admin only) */
    delete: operations["TeamsController_deleteTeam"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/teams/{id}/activate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Activate team (Admin only) */
    patch: operations["TeamsController_activateTeam"]
    trace?: never
  }
  "/teams/{id}/deactivate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Deactivate team (Admin only) */
    patch: operations["TeamsController_deactivateTeam"]
    trace?: never
  }
  "/certificates/issue": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Issue a certificate to a user (Admin only) */
    post: operations["CertificatesController_issueCertificate"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/certificates/{id}/revoke": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Revoke a certificate (Admin only) */
    post: operations["CertificatesController_revokeCertificate"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/certificates/my": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current user certificates */
    get: operations["CertificatesController_getMyCertificates"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/certificates/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get certificate by ID */
    get: operations["CertificatesController_getCertificateById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/certificates/verify/{hash}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Verify certificate by QR code hash */
    get: operations["CertificatesController_verifyCertificate"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all active products */
    get: operations["ProductsController_getAllProducts"]
    put?: never
    /** Create a new product (Admin only) */
    post: operations["ProductsController_createProduct"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get product by ID */
    get: operations["ProductsController_getProductById"]
    /** Update a product (Admin only) */
    put: operations["ProductsController_updateProduct"]
    post?: never
    /** Delete a product permanently (Admin only) - Use with caution */
    delete: operations["ProductsController_deleteProduct"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/{id}/deactivate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Deactivate a product (Admin only) */
    patch: operations["ProductsController_deactivateProduct"]
    trace?: never
  }
  "/products/{id}/activate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Activate a product (Admin only) */
    patch: operations["ProductsController_activateProduct"]
    trace?: never
  }
  "/products/admin/all": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all products including inactive (Admin only) */
    get: operations["ProductsController_getAllProductsAdmin"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/popular": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get popular products (personalized if authenticated)
     * @description Returns popular products ordered by number of orders. If authenticated and user has favorite teams, returns personalized results. Otherwise returns global popular products.
     */
    get: operations["ProductsController_getPopularProducts"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/my-teams": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get products from my favorite teams (JWT required) */
    get: operations["ProductsController_getProductsFromMyTeams"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/search": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search products by name */
    get: operations["ProductsController_searchProducts"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/products/category/{category}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get products by category */
    get: operations["ProductsController_getProductsByCategory"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/countries": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all countries */
    get: operations["CountriesController_getAllCountries"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/countries/count": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get total countries count */
    get: operations["CountriesController_getCountriesCount"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/countries/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get country by ID */
    get: operations["CountriesController_getCountryById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/countries/iso2/{iso2}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get country by ISO2 code */
    get: operations["CountriesController_getCountryByIso2"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/currencies": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all supported currencies */
    get: operations["CurrencyController_getAllCurrencies"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/currencies/{code}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get currency by code */
    get: operations["CurrencyController_getCurrencyByCode"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/currencies/exchange-rates/all": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all exchange rates */
    get: operations["CurrencyController_getAllExchangeRates"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/currencies/exchange-rates/{baseCurrency}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get exchange rates for specific base currency */
    get: operations["CurrencyController_getExchangeRatesForCurrency"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/currencies/convert": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Convert currency amount */
    post: operations["CurrencyController_convertCurrency"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create a new order */
    post: operations["OrdersController_createOrder"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders/my": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get my orders */
    get: operations["OrdersController_getMyOrders"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get order by ID */
    get: operations["OrdersController_getOrderById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders/{id}/cancel": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel order */
    post: operations["OrdersController_cancelOrder"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders/admin/all": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all orders (Admin only) */
    get: operations["OrdersController_getAllOrders"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/orders/admin/{id}/status": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update order status (Admin only) */
    patch: operations["OrdersController_updateOrderStatus"]
    trace?: never
  }
  "/carriers": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all carriers */
    get: operations["CarriersController_getAllCarriers"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/carriers/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get carrier by ID */
    get: operations["CarriersController_getCarrierById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/track/{trackingNumber}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Track delivery by tracking number */
    get: operations["DeliveryController_trackDelivery"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get delivery by ID */
    get: operations["DeliveryController_getDeliveryById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/order/{orderId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get delivery by order ID */
    get: operations["DeliveryController_getDeliveryByOrderId"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/admin/all": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all deliveries (Admin only) */
    get: operations["DeliveryController_getAllDeliveries"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/admin": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create delivery (Admin only) */
    post: operations["DeliveryController_createDelivery"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/deliveries/admin/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update delivery status (Admin only) */
    patch: operations["DeliveryController_updateDelivery"]
    trace?: never
  }
  "/invoices/my": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get my invoices */
    get: operations["InvoicesController_getMyInvoices"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/invoices/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get invoice by ID */
    get: operations["InvoicesController_getInvoiceById"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/invoices/order/{orderId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get invoice by order ID */
    get: operations["InvoicesController_getInvoiceByOrderId"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/invoices/{id}/download": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get invoice PDF download path */
    get: operations["InvoicesController_downloadInvoice"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/dashboard/stats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get dashboard statistics (Admin only) */
    get: operations["AdminController_getDashboardStats"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/dashboard/charts": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get charts data (Admin only) */
    get: operations["AdminController_getChartsData"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/analytics/top-users": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top users by points (Admin only) */
    get: operations["AdminController_getTopUsers"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/analytics/top-products": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top products by orders (Admin only) */
    get: operations["AdminController_getTopProducts"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/analytics/teams/stats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get teams statistics (Admin only) */
    get: operations["AdminController_getTeamsStatistics"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/teams": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all teams including inactive (Admin only) */
    get: operations["AdminController_getAllTeamsAdmin"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/teams/{id}/stats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get detailed statistics for a specific team (Admin only) */
    get: operations["AdminController_getTeamStatistics"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/teams/bulk-activate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Activate multiple teams (Admin only) */
    post: operations["AdminController_bulkActivateTeams"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/teams/bulk-deactivate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Deactivate multiple teams (Admin only) */
    post: operations["AdminController_bulkDeactivateTeams"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/teams/{id}/verify": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Mark team as verified (Admin only) */
    patch: operations["AdminController_verifyTeam"]
    trace?: never
  }
  "/admin/teams/{id}/unverify": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Mark team as unverified (Admin only) */
    patch: operations["AdminController_unverifyTeam"]
    trace?: never
  }
  "/admin/users": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get users list with filters (Admin only) */
    get: operations["AdminController_getUsers"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/users/{id}/role": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update user role (Admin only) */
    patch: operations["AdminController_updateUserRole"]
    trace?: never
  }
  "/admin/users/{id}/donation-level": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update user donation level (Admin only) */
    patch: operations["AdminController_updateDonationLevel"]
    trace?: never
  }
  "/admin/users/{id}/ban": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Ban user (Admin only) */
    post: operations["AdminController_banUser"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admin/users/{id}/unban": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Unban user (Admin only) */
    post: operations["AdminController_unbanUser"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/notifications": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all notifications for current user */
    get: operations["NotificationsController_getNotifications"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/notifications/unread-count": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get unread notifications count */
    get: operations["NotificationsController_getUnreadCount"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/notifications/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get notification by ID */
    get: operations["NotificationsController_getNotificationById"]
    put?: never
    post?: never
    /** Delete notification */
    delete: operations["NotificationsController_deleteNotification"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/notifications/{id}/read": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Mark notification as read */
    patch: operations["NotificationsController_markAsRead"]
    trace?: never
  }
  "/notifications/read-all": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark all notifications as read */
    post: operations["NotificationsController_markAllAsRead"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/news": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all active news (public) */
    get: operations["NewsController_getAllNews"]
    put?: never
    /** Create a new news article (Admin only) */
    post: operations["NewsController_createNews"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/news/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get news by ID (public) */
    get: operations["NewsController_getNewsById"]
    /** Update a news article (Admin only) */
    put: operations["NewsController_updateNews"]
    post?: never
    /** Delete a news article permanently (Admin only) */
    delete: operations["NewsController_deleteNews"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/news/{id}/deactivate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Deactivate a news article (Admin only) */
    patch: operations["NewsController_deactivateNews"]
    trace?: never
  }
  "/news/{id}/activate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Activate a news article (Admin only) */
    patch: operations["NewsController_activateNews"]
    trace?: never
  }
  "/news/personalized": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get personalized news based on favorite teams (requires auth) */
    get: operations["NewsController_getPersonalizedNews"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    LoginInputDto: {
      /**
       * Format: email
       * @description User email address
       * @example admin@thefansive.com
       */
      email: string
      /**
       * @description User password
       * @example password123!
       */
      password: string
    }
    LoginOutputDto: {
      /**
       * @description JWT access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      access_token: string
      /**
       * @description JWT refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refresh_token: string
      /** @description User information */
      user: {
        /**
         * @description User ID
         * @example 1
         */
        id?: string
        /**
         * @description User email
         * @example user@example.com
         */
        email?: string
        /**
         * @description User role
         * @example FAN
         * @enum {string}
         */
        role?: "FAN" | "MANAGER" | "ADMIN" | "SUPER_ADMIN"
      }
    }
    RefreshTokenInputDto: {
      /**
       * @description JWT refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refreshToken: string
    }
    RefreshTokenOutputDto: {
      /**
       * @description New JWT access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      access_token: string
      /**
       * @description New JWT refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refresh_token: string
    }
    GoogleUserDto: {
      /** @description Google user ID */
      providerId: string
      /** @description User email address */
      email: string
      /** @description User first name */
      firstName?: string
      /** @description User last name */
      lastName?: string
      /** @description User avatar URL */
      avatar?: string
      /** @description Google access token */
      accessToken: string
      /** @description Google refresh token */
      refreshToken?: string
    }
    SendEmailOtpDto: {
      /**
       * Format: email
       * @description User email address
       * @example user@example.com
       */
      email: string
    }
    SignUpInputDto: {
      /**
       * @description User first name
       * @example John
       */
      firstName: string
      /**
       * @description User last name
       * @example Doe
       */
      lastName: string
      /**
       * Format: email
       * @description User email address
       * @example john.doe@example.com
       */
      email: string
      /**
       * @description User password
       * @example password123!
       */
      password: string
      /**
       * @description OTP code sent to email
       * @example 111111
       */
      otp: string
    }
    ValidateOtpDto: {
      /**
       * Format: email
       * @description User email address
       * @example user@example.com
       */
      email: string
      /**
       * @description OTP code to validate
       * @example 123456
       */
      otp: string
    }
    CreateUserDto: {
      /**
       * Format: email
       * @description User email address
       * @example user@example.com
       */
      email: string
      /**
       * @description User password
       * @example password123
       */
      password: string
      /**
       * @description User role
       * @example FAN
       * @enum {string}
       */
      role?: "FAN" | "MANAGER" | "ADMIN" | "SUPER_ADMIN"
    }
    UserOutputDto: {
      /**
       * @description User ID
       * @example 1
       */
      id: number
      /**
       * @description User email address
       * @example user@example.com
       */
      email: string
      /**
       * @description User role
       * @example USER
       * @enum {string}
       */
      role: "ADMIN" | "USER"
    }
    CreateProfileDto: {
      /**
       * @description First name
       * @example John
       */
      firstName?: string
      /**
       * @description Last name
       * @example Doe
       */
      lastName?: string
      /**
       * @description Gender
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE" | "NONE"
      /**
       * @description Phone country code (ISO 3166-1 alpha-2)
       * @example US
       */
      phoneCountryCode?: string
      /**
       * @description Phone number (national format)
       * @example 5551234567
       */
      phoneNumber?: string
      /**
       * @description Date of birth (ISO 8601)
       * @example 1990-01-01
       */
      dateOfBirth?: string
      /**
       * @description Bio / About me
       * @example I am a big fan!
       */
      bio?: string
      /**
       * @description Location / City
       * @example New York, USA
       */
      location?: string
      /**
       * @description Social media links
       * @example {
       *       "twitter": "https://twitter.com/username",
       *       "instagram": "https://instagram.com/username",
       *       "facebook": "https://facebook.com/username"
       *     }
       */
      socialMediaLinks?: Record<string, never>
      /**
       * @description User preferences
       * @example {
       *       "language": "en",
       *       "theme": "dark",
       *       "notifications": true
       *     }
       */
      preferences?: Record<string, never>
      /**
       * @description Show profile pictures to others
       * @default true
       * @example true
       */
      showProfilePictures: boolean
    }
    ProfileOutputDto: {
      /**
       * @description Profile ID
       * @example 1
       */
      id: number
      /**
       * @description User ID
       * @example 1
       */
      userId: number
      /**
       * @description First name
       * @example John
       */
      firstName?: Record<string, never>
      /**
       * @description Last name
       * @example Doe
       */
      lastName?: Record<string, never>
      /**
       * @description Gender
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE" | "NONE"
      /**
       * @description Phone country code
       * @example US
       */
      phoneCountryCode?: Record<string, never>
      /**
       * @description Phone number (national format)
       * @example 5551234567
       */
      phoneNumber?: Record<string, never>
      /**
       * @description Phone number in E.164 format
       * @example +15551234567
       */
      phoneE164?: Record<string, never>
      /**
       * @description Date of birth
       * @example 1990-01-01T00:00:00.000Z
       */
      dateOfBirth?: Record<string, never>
      /**
       * @description Bio / About me
       * @example I am a big fan!
       */
      bio?: Record<string, never>
      /**
       * @description Location / City
       * @example New York, USA
       */
      location?: Record<string, never>
      /**
       * @description Social media links
       * @example {
       *       "twitter": "https://twitter.com/username",
       *       "instagram": "https://instagram.com/username"
       *     }
       */
      socialMediaLinks?: Record<string, never>
      /**
       * @description User preferences
       * @example {
       *       "language": "en",
       *       "theme": "dark"
       *     }
       */
      preferences?: Record<string, never>
      /**
       * @description Show profile pictures to others
       * @example true
       */
      showProfilePictures: boolean
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
    }
    UpdateProfileDto: {
      /**
       * @description First name
       * @example John
       */
      firstName?: string
      /**
       * @description Last name
       * @example Doe
       */
      lastName?: string
      /**
       * @description Gender
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE" | "NONE"
      /**
       * @description Phone country code (ISO 3166-1 alpha-2)
       * @example US
       */
      phoneCountryCode?: string
      /**
       * @description Phone number (national format)
       * @example 5551234567
       */
      phoneNumber?: string
      /**
       * @description Date of birth (ISO 8601)
       * @example 1990-01-01
       */
      dateOfBirth?: string
      /**
       * @description Bio / About me
       * @example I am a big fan!
       */
      bio?: string
      /**
       * @description Location / City
       * @example New York, USA
       */
      location?: string
      /**
       * @description Social media links
       * @example {
       *       "twitter": "https://twitter.com/username",
       *       "instagram": "https://instagram.com/username"
       *     }
       */
      socialMediaLinks?: Record<string, never>
      /**
       * @description User preferences
       * @example {
       *       "language": "en",
       *       "theme": "dark"
       *     }
       */
      preferences?: Record<string, never>
      /**
       * @description Show profile pictures to others
       * @example true
       */
      showProfilePictures?: boolean
    }
    StatisticsOutputDto: {
      /**
       * @description Statistics ID
       * @example 1
       */
      id: number
      /**
       * @description User ID
       * @example 1
       */
      userId: number
      /**
       * @description Total points earned
       * @example 1500
       */
      totalPoints: number
      /**
       * @description Total fan supports purchased
       * @example 5
       */
      totalFanSupports: number
      /**
       * @description Total donations amount
       * @example 10
       */
      totalDonations: number
      /**
       * @description Completed tasks count
       * @example 25
       */
      completedTasksCount: number
      /**
       * @description Certificates count
       * @example 3
       */
      certificatesCount: number
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
    }
    LeaderboardEntryDto: {
      /**
       * @description Rank position
       * @example 1
       */
      rank: number
      /**
       * @description User ID
       * @example 1
       */
      userId: number
      /**
       * @description User email
       * @example user@example.com
       */
      userEmail: string
      /**
       * @description User first name
       * @example John
       */
      firstName?: Record<string, never>
      /**
       * @description User last name
       * @example Doe
       */
      lastName?: Record<string, never>
      /**
       * @description Total points
       * @example 1500
       */
      totalPoints: number
      /**
       * @description Total fan supports
       * @example 5
       */
      totalFanSupports: number
      /**
       * @description Total donations
       * @example 10
       */
      totalDonations: number
      /**
       * @description Completed tasks
       * @example 25
       */
      completedTasksCount: number
      /**
       * @description Certificates count
       * @example 3
       */
      certificatesCount: number
    }
    CreateAddressDto: {
      /**
       * @description Country
       * @example United States
       */
      country: string
      /**
       * @description City
       * @example New York
       */
      city: string
      /**
       * @description State/Province
       * @example NY
       */
      state: string
      /**
       * @description Address line 1
       * @example 123 Main Street
       */
      addressLine1: string
      /**
       * @description Address line 2 (optional)
       * @example Apt 4B
       */
      addressLine2?: string
      /**
       * @description ZIP/Postal code
       * @example 10001
       */
      zipCode: string
      /**
       * @description VAT number (optional)
       * @example US123456789
       */
      vatNumber?: string
      /**
       * @description Company name (optional)
       * @example Acme Corp
       */
      companyName?: string
    }
    AddressOutputDto: {
      /**
       * @description Address ID
       * @example 1
       */
      id: number
      /**
       * @description User ID
       * @example 1
       */
      userId: number
      /**
       * @description Country
       * @example United States
       */
      country: string
      /**
       * @description City
       * @example New York
       */
      city: string
      /**
       * @description State/Province
       * @example NY
       */
      state: string
      /**
       * @description Address line 1
       * @example 123 Main Street
       */
      addressLine1: string
      /**
       * @description Address line 2
       * @example Apt 4B
       */
      addressLine2?: Record<string, never>
      /**
       * @description ZIP/Postal code
       * @example 10001
       */
      zipCode: string
      /**
       * @description VAT number
       * @example US123456789
       */
      vatNumber?: Record<string, never>
      /**
       * @description Company name
       * @example Acme Corp
       */
      companyName?: Record<string, never>
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
    }
    UpdateAddressDto: {
      /**
       * @description Country
       * @example United States
       */
      country?: string
      /**
       * @description City
       * @example New York
       */
      city?: string
      /**
       * @description State/Province
       * @example NY
       */
      state?: string
      /**
       * @description Address line 1
       * @example 123 Main Street
       */
      addressLine1?: string
      /**
       * @description Address line 2
       * @example Apt 4B
       */
      addressLine2?: string
      /**
       * @description ZIP/Postal code
       * @example 10001
       */
      zipCode?: string
      /**
       * @description VAT number
       * @example US123456789
       */
      vatNumber?: string
      /**
       * @description Company name
       * @example Acme Corp
       */
      companyName?: string
    }
    TaskMultilingualDto: {
      /**
       * @description Task title in English
       * @example Complete your profile
       */
      en: string
      /**
       * @description Task title in Russian
       * @example Завершите свой профиль
       */
      ru?: string
      /**
       * @description Task title in Turkish
       * @example Profilinizi tamamlayın
       */
      tr?: string
    }
    CreateTaskDto: {
      /**
       * @description Multilingual task title
       * @example {
       *       "en": "Complete your profile",
       *       "ru": "Завершите свой профиль",
       *       "tr": "Profilinizi tamamlayın"
       *     }
       */
      title: components["schemas"]["TaskMultilingualDto"]
      /**
       * @description Multilingual task description
       * @example {
       *       "en": "Fill in all required profile fields",
       *       "ru": "Заполните все обязательные поля профиля"
       *     }
       */
      description: components["schemas"]["TaskMultilingualDto"]
      /**
       * @description Type of task (daily, weekly, one_time)
       * @example DAILY
       * @enum {string}
       */
      taskType: "DAILY" | "WEEKLY" | "ONE_TIME"
      /**
       * @description Points awarded for completing this task
       * @example 100
       */
      points: number
      /**
       * @description Additional metadata for task (JSON)
       * @example {
       *       "action": "complete_profile",
       *       "requiredFields": [
       *         "firstName",
       *         "lastName",
       *         "bio"
       *       ]
       *     }
       */
      metadata?: Record<string, never>
      /**
       * @description Team ID this task is associated with
       * @example 1
       */
      teamId?: number
    }
    TeamOutputDto: {
      /** @example 1 */
      id: number
      /**
       * @description Multilingual team name
       * @example {
       *       "en": "FC Barcelona",
       *       "ru": "ФК Барселона",
       *       "tr": "FC Barcelona"
       *     }
       */
      name: Record<string, never>
      /**
       * @description Multilingual short name
       * @example {
       *       "en": "Barca",
       *       "ru": "Барса",
       *       "tr": "Barça"
       *     }
       */
      shortName?: Record<string, never>
      /** @description Multilingual team description */
      description?: Record<string, never>
      /**
       * @example FOOTBALL
       * @enum {string}
       */
      sportType: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
      /** @example https://example.com/barcelona-logo.png */
      logoUrl?: string
      /** @example https://example.com/barcelona-cover.jpg */
      coverImageUrl?: string
      /** @example https://www.fcbarcelona.com */
      websiteUrl?: string
      /**
       * @example {
       *       "twitter": "https://twitter.com/FCBarcelona",
       *       "facebook": "https://www.facebook.com/fcbarcelona"
       *     }
       */
      socialLinks?: Record<string, never>
      /** @example Spain */
      country?: string
      /** @example Barcelona */
      city?: string
      /** @example 1899 */
      foundedYear?: number
      /** @example true */
      isActive: boolean
      /** @example false */
      isVerified: boolean
      /** @example 0 */
      displayOrder: number
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      /**
       * @description Aggregated counts
       * @example {
       *       "products": 10,
       *       "tasks": 5,
       *       "favoriteByUsers": 1250
       *     }
       */
      _count?: Record<string, never>
    }
    TaskOutputDto: {
      /** @example 1 */
      id: number
      /**
       * @description Multilingual task title (JSON)
       * @example {
       *       "en": "Complete your profile",
       *       "ru": "Завершите свой профиль"
       *     }
       */
      title: Record<string, never>
      /**
       * @description Multilingual task description (JSON)
       * @example {
       *       "en": "Fill in all required profile fields"
       *     }
       */
      description: Record<string, never>
      /**
       * @example DAILY
       * @enum {string}
       */
      taskType: "DAILY" | "WEEKLY" | "ONE_TIME"
      /** @example 100 */
      points: number
      /**
       * @example {
       *       "action": "complete_profile"
       *     }
       */
      metadata: Record<string, never> | null
      /** @example true */
      isActive: boolean
      /** @example 1 */
      teamId: Record<string, never> | null
      team?: components["schemas"]["TeamOutputDto"] | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateTaskDto: {
      /** @description Multilingual task title */
      title?: components["schemas"]["TaskMultilingualDto"]
      /** @description Multilingual task description */
      description?: components["schemas"]["TaskMultilingualDto"]
      /**
       * @description Type of task
       * @enum {string}
       */
      taskType?: "DAILY" | "WEEKLY" | "ONE_TIME"
      /** @description Points awarded for completing this task */
      points?: number
      /** @description Additional metadata for task (JSON) */
      metadata?: Record<string, never>
      /** @description Team ID this task is associated with */
      teamId?: number
    }
    AssignTaskDto: {
      /**
       * @description Task ID to assign
       * @example 1
       */
      taskId: number
      /**
       * @description User ID to assign the task to
       * @example 1
       */
      userId: number
    }
    UserTaskOutputDto: {
      /** @example 1 */
      id: number
      /** @example 1 */
      userId: number
      /** @example 1 */
      taskId: number
      /**
       * @example PENDING
       * @enum {string}
       */
      status: "PENDING" | "IN_PROGRESS" | "COMPLETED" | "FAILED"
      /** @example null */
      completedAt: Record<string, never> | null
      /** @example null */
      proof: Record<string, never> | null
      /** Format: date-time */
      assignedAt: string
      /** @description Task details */
      task?: components["schemas"]["TaskOutputDto"]
    }
    CompleteTaskDto: {
      /**
       * @description User Task ID to complete
       * @example 1
       */
      userTaskId: number
      /**
       * @description Optional proof/evidence of task completion
       * @example {
       *       "screenshotUrl": "https://example.com/proof.png"
       *     }
       */
      proof?: Record<string, never>
    }
    FavoriteTeamOutputDto: {
      /**
       * @description Unique identifier of the favorite team record
       * @example 1
       */
      id: number
      /**
       * @description User ID who favorited the team
       * @example 123
       */
      userId: number
      /**
       * @description Team ID that was favorited
       * @example 5
       */
      teamId: number
      /**
       * Format: date-time
       * @description Date when team was added to favorites
       * @example 2025-10-16T12:00:00Z
       */
      addedAt: string
      /** @description Nested team details */
      team?: components["schemas"]["TeamOutputDto"]
    }
    SportTypeOutputDto: {
      /**
       * @description Sport type enum value
       * @example FOOTBALL
       * @enum {string}
       */
      value: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
      /**
       * @description Human-readable label for the sport type
       * @example Football
       */
      label: string
    }
    SportTypesListDto: {
      /** @description List of all available sport types */
      sportTypes: components["schemas"]["SportTypeOutputDto"][]
    }
    TranslationDto: {
      /**
       * @description English name
       * @example FC Barcelona
       */
      en: string
      /**
       * @description Russian name
       * @example ФК Барселона
       */
      ru?: string
      /**
       * @description Turkish name
       * @example FC Barcelona
       */
      tr?: string
    }
    SocialLinksDto: {
      /** @example https://twitter.com/FCBarcelona */
      twitter?: string
      /** @example https://www.facebook.com/fcbarcelona */
      facebook?: string
      /** @example https://www.instagram.com/fcbarcelona */
      instagram?: string
      /** @example https://www.youtube.com/fcbarcelona */
      youtube?: string
    }
    CreateTeamDto: {
      /**
       * @description Multilingual team name
       * @example {
       *       "en": "FC Barcelona",
       *       "ru": "ФК Барселона",
       *       "tr": "FC Barcelona"
       *     }
       */
      name: components["schemas"]["TranslationDto"]
      /**
       * @description Multilingual short name
       * @example {
       *       "en": "Barca",
       *       "ru": "Барса",
       *       "tr": "Barça"
       *     }
       */
      shortName?: components["schemas"]["TranslationDto"]
      /**
       * @description Multilingual team description
       * @example {
       *       "en": "Professional football club based in Barcelona, Spain",
       *       "ru": "Профессиональный футбольный клуб из Барселоны, Испания"
       *     }
       */
      description?: components["schemas"]["TranslationDto"]
      /**
       * @description Type of sport
       * @example FOOTBALL
       * @enum {string}
       */
      sportType: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
      /**
       * @description URL to team logo
       * @example https://example.com/barcelona-logo.png
       */
      logoUrl?: string
      /**
       * @description URL to team cover image
       * @example https://example.com/barcelona-cover.jpg
       */
      coverImageUrl?: string
      /**
       * @description Official website URL
       * @example https://www.fcbarcelona.com
       */
      websiteUrl?: string
      /** @description Social media links */
      socialLinks?: components["schemas"]["SocialLinksDto"]
      /**
       * @description Country where team is based
       * @example Spain
       */
      country?: string
      /**
       * @description City where team is based
       * @example Barcelona
       */
      city?: string
      /**
       * @description Year when team was founded
       * @example 1899
       */
      foundedYear?: number
      /**
       * @description Whether team is active
       * @default true
       */
      isActive: boolean
      /**
       * @description Whether team is officially verified
       * @default false
       */
      isVerified: boolean
      /**
       * @description Display order for sorting
       * @default 0
       */
      displayOrder: number
    }
    UpdateTeamDto: {
      /**
       * @description Multilingual team name
       * @example {
       *       "en": "FC Barcelona",
       *       "ru": "ФК Барселона",
       *       "tr": "FC Barcelona"
       *     }
       */
      name?: components["schemas"]["TranslationDto"]
      /**
       * @description Multilingual short name
       * @example {
       *       "en": "Barca",
       *       "ru": "Барса",
       *       "tr": "Barça"
       *     }
       */
      shortName?: components["schemas"]["TranslationDto"]
      /**
       * @description Multilingual team description
       * @example {
       *       "en": "Professional football club based in Barcelona, Spain",
       *       "ru": "Профессиональный футбольный клуб из Барселоны, Испания"
       *     }
       */
      description?: components["schemas"]["TranslationDto"]
      /**
       * @description Type of sport
       * @example FOOTBALL
       * @enum {string}
       */
      sportType?: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
      /**
       * @description URL to team logo
       * @example https://example.com/barcelona-logo.png
       */
      logoUrl?: string
      /**
       * @description URL to team cover image
       * @example https://example.com/barcelona-cover.jpg
       */
      coverImageUrl?: string
      /**
       * @description Official website URL
       * @example https://www.fcbarcelona.com
       */
      websiteUrl?: string
      /** @description Social media links */
      socialLinks?: components["schemas"]["SocialLinksDto"]
      /**
       * @description Country where team is based
       * @example Spain
       */
      country?: string
      /**
       * @description City where team is based
       * @example Barcelona
       */
      city?: string
      /**
       * @description Year when team was founded
       * @example 1899
       */
      foundedYear?: number
      /**
       * @description Whether team is active
       * @default true
       */
      isActive: boolean
      /**
       * @description Whether team is officially verified
       * @default false
       */
      isVerified: boolean
      /**
       * @description Display order for sorting
       * @default 0
       */
      displayOrder: number
    }
    IssueCertificateDto: {
      /**
       * @description User ID to issue certificate to
       * @example 1
       */
      userId: number
      /**
       * @description Type of certificate (USUAL or EXTRA)
       * @example USUAL
       * @enum {string}
       */
      certificateType: "USUAL" | "EXTRA"
      /**
       * @description Issue date (defaults to now if not provided)
       * @example 2025-10-06T00:00:00.000Z
       */
      issuedDate?: string
      /**
       * @description Expiration date (optional)
       * @example 2026-10-06T00:00:00.000Z
       */
      expireDate?: string
      /**
       * @description Custom title for the certificate (optional)
       * @example Achievement Award
       */
      customTitle?: string
    }
    CertificateOutputDto: {
      /** @example 1 */
      id: number
      /** @example 1 */
      userId: number
      /**
       * @example USUAL
       * @enum {string}
       */
      certificateType: "USUAL" | "EXTRA"
      /** @example https://storage.thefansive.com/certificates/cert-123.pdf */
      certificateUrl: string
      /** @example https://storage.thefansive.com/qr-codes/qr-123.png */
      qrCodeUrl: Record<string, never> | null
      /**
       * Format: date-time
       * @example 2025-10-06T00:00:00.000Z
       */
      issuedDate: string
      /** @example 2026-10-06T00:00:00.000Z */
      expireDate: Record<string, never> | null
      /** @example true */
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    VerifyCertificateDto: {
      /** @example true */
      isValid: boolean
      /** @example 1 */
      certificateId: Record<string, never> | null
      /** @example 1 */
      userId: Record<string, never> | null
      /** @example John Doe */
      userName: Record<string, never> | null
      /** @example 2025-10-06T00:00:00.000Z */
      issuedDate: Record<string, never> | null
      /** @example 2026-10-06T00:00:00.000Z */
      expireDate: Record<string, never> | null
      /** @example false */
      isExpired: Record<string, never> | null
      /** @example Certificate is valid */
      message: Record<string, never> | null
    }
    ProductMultilingualDto: {
      /**
       * @description Product name in English
       * @example Fan Support Package
       */
      en: string
      /**
       * @description Product name in Russian
       * @example Пакет поддержки фанов
       */
      ru?: string
      /**
       * @description Product name in Turkish
       * @example Fan Destek Paketi
       */
      tr?: string
    }
    CreateProductDto: {
      /**
       * @description Multilingual product name
       * @example {
       *       "en": "Fan Support Package",
       *       "ru": "Пакет поддержки фанов"
       *     }
       */
      productName: components["schemas"]["ProductMultilingualDto"]
      /**
       * @description Multilingual product description
       * @example {
       *       "en": "Support your favorite creator",
       *       "ru": "Поддержите вашего любимого создателя"
       *     }
       */
      productDescription?: components["schemas"]["ProductMultilingualDto"]
      /**
       * @description Product category
       * @example FAN_SUPPORT
       * @enum {string}
       */
      productCategory: "FAN_SUPPORT"
      /**
       * @description Product image URL
       * @example https://cdn.thefansive.com/products/package-1.png
       */
      productImageUrl?: string
      /**
       * @description Price in cents (e.g., 999 = $9.99)
       * @example 999
       */
      priceCents: number
      /**
       * @description Currency code
       * @default USD
       * @example USD
       */
      currencyCode: string
      /**
       * @description Team ID this product is associated with
       * @example 1
       */
      teamId?: number
    }
    ProductOutputDto: {
      /** @example 1 */
      id: number
      /**
       * @description Multilingual product name (JSON)
       * @example {
       *       "en": "Fan Support Package",
       *       "ru": "Пакет поддержки фанов"
       *     }
       */
      productName: Record<string, never>
      /**
       * @description Multilingual product description (JSON)
       * @example {
       *       "en": "Support your favorite creator"
       *     }
       */
      productDescription: Record<string, never> | null
      /**
       * @example FAN_SUPPORT
       * @enum {string}
       */
      productCategory: "FAN_SUPPORT"
      /** @example https://cdn.thefansive.com/products/package-1.png */
      productImageUrl: Record<string, never> | null
      /**
       * @description Price in cents
       * @example 999
       */
      priceCents: number
      /** @example USD */
      currencyCode: string
      /** @example true */
      isActive: boolean
      /** @example 1 */
      teamId: Record<string, never> | null
      team?: components["schemas"]["TeamOutputDto"] | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateProductDto: {
      /** @description Multilingual product name */
      productName?: components["schemas"]["ProductMultilingualDto"]
      /** @description Multilingual product description */
      productDescription?: components["schemas"]["ProductMultilingualDto"]
      /**
       * @description Product category
       * @enum {string}
       */
      productCategory?: "FAN_SUPPORT"
      /** @description Product image URL */
      productImageUrl?: string
      /** @description Price in cents */
      priceCents?: number
      /** @description Currency code */
      currencyCode?: string
      /** @description Is product active */
      isActive?: boolean
      /** @description Team ID this product is associated with */
      teamId?: number
    }
    CountryOutputDto: {
      /** @example 1 */
      id: number
      /** @example Ukraine */
      name: string
      /** @example UKR */
      iso3?: string
      /** @example 804 */
      numericCode?: string
      /** @example UA */
      iso2?: string
      /** @example 380 */
      phonecode?: string
      /** @example Kyiv */
      capital?: string
      /** @example UAH */
      currency?: string
      /** @example Ukrainian Hryvnia */
      currencyName?: string
      /** @example ₴ */
      currencySymbol?: string
      /** @example .ua */
      tld?: string
      /** @example Україна */
      native?: string
      /** @example Europe */
      region?: string
      /** @example Eastern Europe */
      subregion?: string
      /** @example Ukrainian */
      nationality?: string
      /** @example 🇺🇦 */
      emoji?: string
    }
    CurrencyOutputDto: {
      /** @example 1 */
      id: number
      /**
       * @description Currency code (ISO 4217)
       * @example USD
       */
      code: string
      /** @example US Dollar */
      name: string
      /** @example $ */
      symbol: string
      /**
       * @description Number of decimal places
       * @example 2
       */
      decimalPlaces: number
    }
    ExchangeRateOutputDto: {
      /**
       * @description Base currency code
       * @example USD
       */
      baseCurrency: string
      /**
       * @description Target currency code
       * @example EUR
       */
      targetCurrency: string
      /**
       * @description Exchange rate
       * @example 0.92
       */
      rate: number
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
    }
    ConvertCurrencyDto: {
      /**
       * @description Amount to convert
       * @example 100
       */
      amount: number
      /**
       * @description From currency code
       * @example USD
       */
      fromCurrency: string
      /**
       * @description To currency code
       * @example EUR
       */
      toCurrency: string
    }
    ConvertCurrencyResponseDto: {
      /** @example 100 */
      amount: number
      /** @example USD */
      fromCurrency: string
      /** @example EUR */
      toCurrency: string
      /** @example 92.5 */
      convertedAmount: number
      /** @example 0.925 */
      rate: number
      /** Format: date-time */
      timestamp: string
    }
    CreateOrderDto: {
      /**
       * @description Product ID
       * @example 1
       */
      productId: number
      /**
       * @description Delivery address ID (optional for digital products)
       * @example 1
       */
      addressId?: number
      /**
       * @description Quantity of products
       * @default 1
       * @example 1
       */
      quantity: number
    }
    OrderUserDto: {
      /** @example 1 */
      id: number
      /** @example user@example.com */
      email: string
      /** @example John */
      firstName: string
      /** @example Doe */
      lastName: string
    }
    OrderProductDto: {
      /** @example 1 */
      id: number
      /**
       * @example {
       *       "en": "Fan Support Package",
       *       "ru": "Пакет поддержки"
       *     }
       */
      productName: Record<string, never>
      /** @example 1999 */
      priceCents: number
      /** @example USD */
      currencyCode: string
    }
    OrderAddressDto: {
      /** @example 1 */
      id: number
      /** @example Ukraine */
      country: string
      /** @example Kyiv */
      city: string
      /** @example Khreshchatyk St, 1 */
      addressLine1: string
      /** @example 01001 */
      zipCode?: string
    }
    OrderOutputDto: {
      /** @example 1 */
      id: number
      /** @example ORD-20251006-A1B2C3 */
      orderId: string
      /** @example 1 */
      userId: number
      user: components["schemas"]["OrderUserDto"]
      /** @example 1 */
      productId: number
      product: components["schemas"]["OrderProductDto"]
      /** @example 1 */
      addressId?: number
      address?: components["schemas"]["OrderAddressDto"]
      /** @example 1 */
      quantity: number
      /** @example 1999 */
      totalPriceCents: number
      /**
       * @example PENDING
       * @enum {string}
       */
      orderStatus: "PENDING" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED"
      /**
       * @example IN_PROCESS
       * @enum {string}
       */
      paymentStatus: "PAID" | "IN_PROCESS" | "FAILED"
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      updatedAt: string
    }
    UpdateOrderStatusDto: {
      /**
       * @description Order status
       * @example PROCESSING
       * @enum {string}
       */
      orderStatus?: "PENDING" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED"
      /**
       * @description Payment status
       * @example PAID
       * @enum {string}
       */
      paymentStatus?: "PAID" | "IN_PROCESS" | "FAILED"
    }
    CarrierOutputDto: {
      /** @example 1 */
      id: number
      /** @example Nova Poshta */
      name: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      updatedAt: string
    }
    DeliveryOrderDto: {
      /** @example 1 */
      id: number
      /** @example ORD-20251006-A1B2C3 */
      orderId: string
    }
    DeliveryCarrierDto: {
      /** @example 1 */
      id: number
      /** @example Nova Poshta */
      name: string
    }
    DeliveryOutputDto: {
      /** @example 1 */
      id: number
      /** @example 1 */
      orderId: number
      order: components["schemas"]["DeliveryOrderDto"]
      /** @example 1 */
      carrierId: number
      carrier: components["schemas"]["DeliveryCarrierDto"]
      /** @example TN1234567890 */
      trackingNumber?: string
      /**
       * @example ONGOING
       * @enum {string}
       */
      deliveryStatus: "ONGOING" | "COMPLETED"
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      updatedAt: string
    }
    CreateDeliveryDto: {
      /**
       * @description Order ID
       * @example 1
       */
      orderId: number
      /**
       * @description Carrier ID
       * @example 1
       */
      carrierId: number
      /**
       * @description Tracking number
       * @example TN1234567890
       */
      trackingNumber?: string
    }
    UpdateDeliveryDto: {
      /**
       * @example COMPLETED
       * @enum {string}
       */
      deliveryStatus?: "ONGOING" | "COMPLETED"
      /**
       * @description Tracking number
       * @example TN1234567890
       */
      trackingNumber?: string
    }
    InvoiceOrderDto: {
      /** @example 1 */
      id: number
      /** @example ORD-20251006-A1B2C3 */
      orderId: string
    }
    InvoiceUserDto: {
      /** @example 1 */
      id: number
      /** @example user@example.com */
      email: string
      /** @example John */
      firstName: string
      /** @example Doe */
      lastName: string
    }
    InvoiceOutputDto: {
      /** @example 1 */
      id: number
      /** @example INV-2025-000001 */
      invoiceNumber: string
      /** @example 1 */
      orderId: number
      order: components["schemas"]["InvoiceOrderDto"]
      user: components["schemas"]["InvoiceUserDto"]
      /** @example /storage/invoices/invoice-1.pdf */
      pdfUrl?: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-06T10:00:00Z
       */
      updatedAt: string
    }
    RevenueDto: {
      /** @example 15000 */
      total: number
      /** @example USD */
      currency: string
    }
    DashboardStatsDto: {
      /** @example 1500 */
      totalUsers: number
      /** @example 1200 */
      activeUsers: number
      /** @example 350 */
      totalOrders: number
      /** @example 280 */
      paidOrders: number
      revenue: components["schemas"]["RevenueDto"]
      /** @example 5000 */
      tasksCompleted: number
      /** @example 120 */
      certificatesIssued: number
    }
    ChartDataPoint: {
      /** @example 2025-10-01 */
      date: string
      /** @example 25 */
      count: number
    }
    ChartsDataDto: {
      /** @description User registrations by day */
      registrations: components["schemas"]["ChartDataPoint"][]
      /** @description Orders by day */
      orders: components["schemas"]["ChartDataPoint"][]
      /** @description Completed tasks by day */
      tasksCompleted: components["schemas"]["ChartDataPoint"][]
    }
    UpdateUserRoleDto: {
      /**
       * @example ADMIN
       * @enum {string}
       */
      role: "FAN" | "MANAGER" | "ADMIN" | "SUPER_ADMIN"
    }
    UpdateDonationLevelDto: {
      /**
       * @example GOLD
       * @enum {string}
       */
      donationLevel: "BASIC" | "GOLD" | "VIP"
    }
    NotificationOutputDto: {
      /** @example 1 */
      id: number
      /** @example 1 */
      userId: number
      /**
       * @example TASK_COMPLETED
       * @enum {string}
       */
      type: "TASK_COMPLETED" | "ORDER_PAID" | "ORDER_SHIPPED" | "ORDER_DELIVERED" | "CERTIFICATE_ISSUED" | "SYSTEM"
      /** @example Task Completed */
      title: string
      /** @example You have completed the daily task! */
      message: string
      /** @example false */
      isRead: boolean
      /**
       * Format: date-time
       * @example 2025-10-06T12:00:00.000Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-06T12:00:00.000Z
       */
      updatedAt: string
    }
    TranslatableTextDto: {
      /** @example Breaking News: Team Wins Championship */
      en: string
      /** @example Срочные новости: Команда выигрывает чемпионат */
      ru?: string
      /** @example Última hora: El equipo gana el campeonato */
      es?: string
    }
    CreateNewsDto: {
      /** @description News title in multiple languages */
      title: components["schemas"]["TranslatableTextDto"]
      /** @description News content in multiple languages */
      content: components["schemas"]["TranslatableTextDto"]
      /**
       * @default GENERAL
       * @example GENERAL
       * @enum {string}
       */
      category: "MATCH_RESULT" | "TRANSFER" | "ANNOUNCEMENT" | "INTERVIEW" | "GENERAL"
      /**
       * @description URL to news image
       * @example https://example.com/news-image.jpg
       */
      imageUrl?: string
      /**
       * @description Team ID associated with this news
       * @example 1
       */
      teamId?: number
    }
    NewsOutputDto: {
      /** @example 1 */
      id: number
      /**
       * @example {
       *       "en": "Breaking News: Team Wins Championship",
       *       "ru": "Срочные новости: Команда выигрывает чемпионат"
       *     }
       */
      title: Record<string, never>
      /**
       * @example {
       *       "en": "The team has won the championship in a thrilling match...",
       *       "ru": "Команда выиграла чемпионат в захватывающем матче..."
       *     }
       */
      content: Record<string, never>
      /**
       * @example GENERAL
       * @enum {string}
       */
      category: "MATCH_RESULT" | "TRANSFER" | "ANNOUNCEMENT" | "INTERVIEW" | "GENERAL"
      /** @example https://example.com/news-image.jpg */
      imageUrl: Record<string, never> | null
      /** @example 1 */
      teamId: Record<string, never> | null
      team: components["schemas"]["TeamOutputDto"] | null
      /**
       * Format: date-time
       * @example 2025-10-18T10:00:00.000Z
       */
      publishedAt: string
      /** @example true */
      isActive: boolean
      /**
       * Format: date-time
       * @example 2025-10-18T10:00:00.000Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @example 2025-10-18T10:00:00.000Z
       */
      updatedAt: string
    }
    UpdateNewsDto: {
      /** @description News title in multiple languages */
      title?: components["schemas"]["TranslatableTextDto"]
      /** @description News content in multiple languages */
      content?: components["schemas"]["TranslatableTextDto"]
      /**
       * @default GENERAL
       * @example GENERAL
       * @enum {string}
       */
      category: "MATCH_RESULT" | "TRANSFER" | "ANNOUNCEMENT" | "INTERVIEW" | "GENERAL"
      /**
       * @description URL to news image
       * @example https://example.com/news-image.jpg
       */
      imageUrl?: string
      /**
       * @description Team ID associated with this news
       * @example 1
       */
      teamId?: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  HealthController_check: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Service is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @example ok */
            status?: string
            /** @example 2025-10-06T10:00:00.000Z */
            timestamp?: string
            /** @example 12345 */
            uptime?: number
            checks?: {
              /** @example ok */
              database?: string
              /** @example ok */
              redis?: string
            }
          }
        }
      }
    }
  }
  AuthController_login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginInputDto"]
      }
    }
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["LoginOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid credentials */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_refresh: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenInputDto"]
      }
    }
    responses: {
      /** @description Token refresh successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RefreshTokenOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid refresh token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenInputDto"]
      }
    }
    responses: {
      /** @description Logout successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": boolean
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_googleAuth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Redirects to Google OAuth consent screen */
      302: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_googleAuthCallback: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OAuth authentication successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["LoginOutputDto"]
        }
      }
      /** @description OAuth authentication failed */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_linkGoogleAccount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleUserDto"]
      }
    }
    responses: {
      /** @description Google account linked successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["LoginOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict - Google account already linked */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_sendEmailOtpCode: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmailOtpDto"]
      }
    }
    responses: {
      /** @description OTP sent successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": boolean
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_signUp: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpInputDto"]
      }
    }
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": boolean
        }
      }
      /** @description Bad request - validation error or invalid OTP */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict - user already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_validateOtp: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateOtpDto"]
      }
    }
    responses: {
      /** @description OTP validation result */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": boolean
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"]
      }
    }
    responses: {
      /** @description User created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - insufficient permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User found successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - insufficient permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User deleted successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - insufficient permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_getProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Current user profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @example 1 */
            userId?: string
            /**
             * @example FAN
             * @enum {string}
             */
            role?: "FAN" | "MANAGER" | "ADMIN" | "SUPER_ADMIN"
            /** @description JWT payload information */
            user?: Record<string, never>
          }
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_getProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_updateProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileDto"]
      }
    }
    responses: {
      /** @description Profile updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_createProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProfileDto"]
      }
    }
    responses: {
      /** @description Profile created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict - profile already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_deleteProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Profile deleted successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_getPublicProfile: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        userId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Public profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_updateSocialLinks: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": {
          /** @example https://twitter.com/username */
          twitter?: string
          /** @example https://instagram.com/username */
          instagram?: string
          /** @example https://facebook.com/username */
          facebook?: string
        }
      }
    }
    responses: {
      /** @description Social links updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_updatePreferences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": {
          /** @example en */
          language?: string
          /** @example dark */
          theme?: string
          /** @example true */
          notifications?: boolean
        }
      }
    }
    responses: {
      /** @description Preferences updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProfileOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StatisticsController_getMyStatistics: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["StatisticsOutputDto"]
        }
      }
      /** @description Statistics not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StatisticsController_getLeaderboard: {
    parameters: {
      query?: {
        /** @description Sort by field (default: totalPoints) */
        sortBy?: "totalPoints" | "totalFanSupports" | "totalDonations" | "completedTasksCount" | "certificatesCount"
        /** @description Number of entries to return (1-1000, default: 100) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Leaderboard retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["LeaderboardEntryDto"][]
        }
      }
    }
  }
  StatisticsController_getTopFans: {
    parameters: {
      query?: {
        /** @description Number of top fans to return (default: 10) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Top fans retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["LeaderboardEntryDto"][]
        }
      }
    }
  }
  StatisticsController_getUserStatistics: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        userId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["StatisticsOutputDto"]
        }
      }
      /** @description Statistics not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AddressController_getAddresses: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Addresses retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["AddressOutputDto"][]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AddressController_createAddress: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAddressDto"]
      }
    }
    responses: {
      /** @description Address created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["AddressOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AddressController_getAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Address ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Address retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["AddressOutputDto"]
        }
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Address not found or does not belong to user */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AddressController_updateAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Address ID */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAddressDto"]
      }
    }
    responses: {
      /** @description Address updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["AddressOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Address not found or does not belong to user */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AddressController_deleteAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Address ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Address deleted successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Address not found or does not belong to user */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_getAllTasks: {
    parameters: {
      query?: {
        /** @description Filter tasks by team ID */
        teamId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Tasks retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"][]
        }
      }
    }
  }
  TasksController_createTask: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTaskDto"]
      }
    }
    responses: {
      /** @description Task created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_getTaskById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Task ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"]
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_updateTask: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Task ID */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTaskDto"]
      }
    }
    responses: {
      /** @description Task updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_deactivateTask: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Task ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_assignTask: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignTaskDto"]
      }
    }
    responses: {
      /** @description Task assigned successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTaskOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Task or user not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Task already assigned to user */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_getTasksFromMyTeams: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Tasks from favorite teams */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TaskOutputDto"][]
        }
      }
    }
  }
  TasksController_getMyTasks: {
    parameters: {
      query?: {
        /** @description Filter by task status */
        status?: "PENDING" | "IN_PROGRESS" | "COMPLETED" | "FAILED"
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User tasks retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTaskOutputDto"][]
        }
      }
    }
  }
  TasksController_getMyActiveTasks: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Active tasks retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTaskOutputDto"][]
        }
      }
    }
  }
  TasksController_startTask: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User Task ID */
        userTaskId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task started successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTaskOutputDto"]
        }
      }
      /** @description Task already completed or in progress */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - Not your task */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_completeTask: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompleteTaskDto"]
      }
    }
    responses: {
      /** @description Task completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTaskOutputDto"]
        }
      }
      /** @description Task already completed */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized - Not your task */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TasksController_getMyTasksStats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Completed tasks count */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            count?: number
          }
        }
      }
    }
  }
  UserFavoriteTeamsController_getFavoriteTeams: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns list of favorite teams */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["FavoriteTeamOutputDto"][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserFavoriteTeamsController_addFavoriteTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team added to favorites successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["FavoriteTeamOutputDto"]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team already in favorites */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserFavoriteTeamsController_removeFavoriteTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team removed from favorites successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not in favorites */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserFavoriteTeamsController_checkIsFavorite: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns whether team is in favorites */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            isFavorite?: boolean
          }
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_getAllTeams: {
    parameters: {
      query?: {
        /** @description Filter by sport type */
        sportType?: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
        /** @description Filter by country */
        country?: string
        /** @description Search by team name (case insensitive, multilingual) */
        search?: string
        /** @description Number of items to return */
        limit?: number
        /** @description Number of items to skip */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns list of active teams */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"][]
        }
      }
    }
  }
  TeamsController_createTeam: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamDto"]
      }
    }
    responses: {
      /** @description Team created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin role required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_searchTeams: {
    parameters: {
      query: {
        /** @description Search query */
        q: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns matching teams */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"][]
        }
      }
    }
  }
  TeamsController_getAllSportTypes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns list of all sport types */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SportTypesListDto"]
        }
      }
    }
  }
  TeamsController_getTeamsBySport: {
    parameters: {
      query?: never
      header?: never
      path: {
        sportType: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns teams of specified sport */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"][]
        }
      }
    }
  }
  TeamsController_getTeamById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns team details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"]
        }
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_updateTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTeamDto"]
      }
    }
    responses: {
      /** @description Team updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin role required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_deleteTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Super Admin role required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_activateTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team activated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin role required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TeamsController_deactivateTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["TeamOutputDto"]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin role required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CertificatesController_issueCertificate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["IssueCertificateDto"]
      }
    }
    responses: {
      /** @description Certificate issued successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CertificateOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CertificatesController_revokeCertificate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Certificate ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Certificate revoked successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CertificateOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CertificatesController_getMyCertificates: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Certificates retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CertificateOutputDto"][]
        }
      }
    }
  }
  CertificatesController_getCertificateById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Certificate ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Certificate retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CertificateOutputDto"]
        }
      }
      /** @description Unauthorized - Not your certificate */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CertificatesController_verifyCertificate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Verification hash from QR code */
        hash: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Verification result */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["VerifyCertificateDto"]
        }
      }
    }
  }
  ProductsController_getAllProducts: {
    parameters: {
      query?: {
        /** @description Filter products by team ID */
        teamId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Products retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
    }
  }
  ProductsController_createProduct: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProductDto"]
      }
    }
    responses: {
      /** @description Product created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_getProductById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Product retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_updateProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product ID */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductDto"]
      }
    }
    responses: {
      /** @description Product updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_deleteProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Product deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_deactivateProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Product deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_activateProduct: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Product activated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_getAllProductsAdmin: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Products retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_getPopularProducts: {
    parameters: {
      query?: {
        /** @description Number of items to return (default: 20) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Popular products retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
    }
  }
  ProductsController_getProductsFromMyTeams: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Products from favorite teams */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductsController_searchProducts: {
    parameters: {
      query: {
        /** @description Search term */
        q: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Search results */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
    }
  }
  ProductsController_getProductsByCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Product category */
        category: "FAN_SUPPORT"
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Products retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductOutputDto"][]
        }
      }
    }
  }
  CountriesController_getAllCountries: {
    parameters: {
      query?: {
        /** @description Search by country name, ISO2, or ISO3 */
        search?: string
        /** @description Limit results (default: 50, max: 250) */
        limit?: number
        /** @description Offset for pagination (default: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CountryOutputDto"][]
        }
      }
    }
  }
  CountriesController_getCountriesCount: {
    parameters: {
      query?: {
        /** @description Search filter */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  CountriesController_getCountryById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Country ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CountryOutputDto"]
        }
      }
      /** @description Country not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CountriesController_getCountryByIso2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Country ISO2 code (e.g., UA, US, GB) */
        iso2: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CountryOutputDto"]
        }
      }
      /** @description Country not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CurrencyController_getAllCurrencies: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all currencies */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CurrencyOutputDto"][]
        }
      }
    }
  }
  CurrencyController_getCurrencyByCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns currency details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CurrencyOutputDto"]
        }
      }
      /** @description Currency not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CurrencyController_getAllExchangeRates: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all exchange rates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ExchangeRateOutputDto"][]
        }
      }
    }
  }
  CurrencyController_getExchangeRatesForCurrency: {
    parameters: {
      query?: never
      header?: never
      path: {
        baseCurrency: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns exchange rates for base currency */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ExchangeRateOutputDto"][]
        }
      }
      /** @description Currency not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CurrencyController_convertCurrency: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvertCurrencyDto"]
      }
    }
    responses: {
      /** @description Returns conversion result */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ConvertCurrencyResponseDto"]
        }
      }
      /** @description Currency or exchange rate not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrdersController_createOrder: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrderDto"]
      }
    }
    responses: {
      /** @description Order created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["OrderOutputDto"]
        }
      }
      /** @description Bad request - validation error */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Product not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrdersController_getMyOrders: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns user orders */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["OrderOutputDto"][]
        }
      }
    }
  }
  OrdersController_getOrderById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns order details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["OrderOutputDto"]
        }
      }
      /** @description Order not found or access denied */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrdersController_cancelOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Order cancelled successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Order cannot be cancelled */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Order not found or access denied */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrdersController_getAllOrders: {
    parameters: {
      query?: {
        orderStatus?: "PENDING" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED"
        paymentStatus?: "PAID" | "IN_PROCESS" | "FAILED"
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all orders */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["OrderOutputDto"][]
        }
      }
    }
  }
  OrdersController_updateOrderStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrderStatusDto"]
      }
    }
    responses: {
      /** @description Order status updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Order not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CarriersController_getAllCarriers: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all carriers */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarrierOutputDto"][]
        }
      }
    }
  }
  CarriersController_getCarrierById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns carrier details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarrierOutputDto"]
        }
      }
      /** @description Carrier not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeliveryController_trackDelivery: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackingNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns delivery details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeliveryOutputDto"]
        }
      }
      /** @description Delivery not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeliveryController_getDeliveryById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns delivery details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeliveryOutputDto"]
        }
      }
      /** @description Delivery not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeliveryController_getDeliveryByOrderId: {
    parameters: {
      query?: never
      header?: never
      path: {
        orderId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns delivery details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeliveryOutputDto"]
        }
      }
      /** @description Delivery not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeliveryController_getAllDeliveries: {
    parameters: {
      query?: {
        deliveryStatus?: "ONGOING" | "COMPLETED"
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all deliveries */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeliveryOutputDto"][]
        }
      }
    }
  }
  DeliveryController_createDelivery: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeliveryDto"]
      }
    }
    responses: {
      /** @description Delivery created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeliveryOutputDto"]
        }
      }
      /** @description Bad request - delivery already exists */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Order or carrier not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeliveryController_updateDelivery: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDeliveryDto"]
      }
    }
    responses: {
      /** @description Delivery updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Delivery not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvoicesController_getMyInvoices: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns user invoices */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["InvoiceOutputDto"][]
        }
      }
    }
  }
  InvoicesController_getInvoiceById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns invoice details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["InvoiceOutputDto"]
        }
      }
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvoicesController_getInvoiceByOrderId: {
    parameters: {
      query?: never
      header?: never
      path: {
        orderId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns invoice details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["InvoiceOutputDto"]
        }
      }
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvoicesController_downloadInvoice: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns PDF URL */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getDashboardStats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns dashboard stats */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DashboardStatsDto"]
        }
      }
    }
  }
  AdminController_getChartsData: {
    parameters: {
      query?: {
        /** @description Number of days (default: 30) */
        days?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charts data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChartsDataDto"]
        }
      }
    }
  }
  AdminController_getTopUsers: {
    parameters: {
      query?: {
        /** @description Limit (default: 10) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns top users */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getTopProducts: {
    parameters: {
      query?: {
        /** @description Limit (default: 10) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns top products */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getTeamsStatistics: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns teams statistics */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getAllTeamsAdmin: {
    parameters: {
      query?: {
        sportType?: "FOOTBALL" | "BASKETBALL" | "HOCKEY" | "VOLLEYBALL" | "TENNIS" | "RUGBY" | "BASEBALL" | "OTHER"
        country?: string
        isActive?: boolean
        isVerified?: boolean
        search?: string
        /** @description Default: 100 */
        limit?: number
        /** @description Default: 0 */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all teams with filters */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getTeamStatistics: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns detailed team statistics */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_bulkActivateTeams: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Teams activated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_bulkDeactivateTeams: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Teams deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_verifyTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team verified successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_unverifyTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Team unverified successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_getUsers: {
    parameters: {
      query?: {
        role?: "FAN" | "MANAGER" | "ADMIN" | "SUPER_ADMIN"
        isActive?: boolean
        search?: string
        /** @description Default: 50 */
        limit?: number
        /** @description Default: 0 */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns users list */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_updateUserRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRoleDto"]
      }
    }
    responses: {
      /** @description User role updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_updateDonationLevel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDonationLevelDto"]
      }
    }
    responses: {
      /** @description Donation level updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_banUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User banned successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AdminController_unbanUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User unbanned successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_getNotifications: {
    parameters: {
      query?: {
        type?: "TASK_COMPLETED" | "ORDER_PAID" | "ORDER_SHIPPED" | "ORDER_DELIVERED" | "CERTIFICATE_ISSUED" | "SYSTEM"
        isRead?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NotificationOutputDto"][]
        }
      }
    }
  }
  NotificationsController_getUnreadCount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  NotificationsController_getNotificationById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NotificationOutputDto"]
        }
      }
      /** @description Notification not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_deleteNotification: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Notification deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Notification not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_markAsRead: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NotificationOutputDto"]
        }
      }
      /** @description Notification not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_markAllAsRead: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  NewsController_getAllNews: {
    parameters: {
      query?: {
        /** @description Number of items to return (default: 20) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description News retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"][]
        }
      }
    }
  }
  NewsController_createNews: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNewsDto"]
      }
    }
    responses: {
      /** @description News created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_getNewsById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description News ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description News retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description News not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_updateNews: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description News ID */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNewsDto"]
      }
    }
    responses: {
      /** @description News updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description News not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_deleteNews: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description News ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description News deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description News not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_deactivateNews: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description News ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description News deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description News not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_activateNews: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description News ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description News activated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"]
        }
      }
      /** @description Forbidden - Admin only */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description News not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NewsController_getPersonalizedNews: {
    parameters: {
      query?: {
        /** @description Number of items to return (default: 20) */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Personalized news retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NewsOutputDto"][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
